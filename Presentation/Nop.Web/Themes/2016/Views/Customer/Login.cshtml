@model LoginModel
@using Nop.Web.Models.Customer;
@using Nop.Core;
@using Nop.Core.Infrastructure;
@{
    Layout = "~/Views/Shared/_ColumnsOne.cshtml";

    //title
    Html.AddTitleParts(T("PageTitle.Login").Text);

    //register URL with return URL (if specified)
    var registerUrl = Url.RouteUrl("Register");
    if (!String.IsNullOrEmpty(this.Context.Request.QueryString["returnUrl"]))
    {
        var webHelper = EngineContext.Current.Resolve<IWebHelper>();
        registerUrl = webHelper.ModifyQueryString(registerUrl, "returnurl=" + HttpUtility.UrlEncode(this.Context.Request.QueryString["returnUrl"]), null);
    }
}

<h2 class="shop-skimboards">@T("Account.Login.Welcome")</h2>
@Html.Partial("_ExternalAuthentication.AssociateMessage")
@Html.Partial("_ExternalAuthentication.Errors")
<div class="page-body">
    <div class="customer-blocks">
        @if (Model.CheckoutAsGuest)
            {
            <div class="new-wrapper checkout-as-guest-or-register-block">
                <div class="title">
                    <strong>@T("Account.Login.CheckoutAsGuestOrRegister")</strong>
                </div>
                <div class="text">
                    @Html.Action("TopicBlock", "Topic", new { systemName = "CheckoutAsGuestOrRegister" })
                </div>
                <div class="buttons">
                    <div class="size-color">
                        <p class="wrap-by">
                            <input class="by" type="submit" onclick="location.href = '@Url.RouteUrl("Checkout")'" value="@T("Account.Login.CheckoutAsGuest")">
                        </p>
                    </div>

                    <div class="size-color">
                        <p class="wrap-by">
                            <input class="by" type="submit" onclick="location.href = '@registerUrl'" value="@T("Account.Register")">
                        </p>
                    </div>

                </div>
            </div>
        }
        else
        {
            @*<div class="new-wrapper register-block">
                    <div class="title">
                        <strong>@T("Account.Login.NewCustomer")</strong>
                    </div>
                    <div class="text">
                        @T("Account.Login.NewCustomerText")
                    </div>
                    <div class="size-color">
                        <p class="wrap-by">
                            <input class="by" type="submit" onclick="location.href='@registerUrl'" value="@T("Account.Register")">
                        </p>
                    </div>

                </div>*@
        }
        <div class="returning-wrapper fieldset">
            @using (Html.BeginForm())
            {
                var validationSummary = Html.ValidationSummary(true, T("Account.Login.Unsuccessful").Text);
                @*<div class="title">
                        <strong>@T("Account.Login.ReturningCustomer")</strong>
                    </div>*@
            if (!MvcHtmlString.IsNullOrEmpty(validationSummary))
            {
                <div class="message-error">@validationSummary</div>
            }
            <div class="form-fields">
                @if (Model.UsernamesEnabled)
                {
                    <div class="inputs">
                        @Html.LabelFor(m => m.Username, new { }, ":")
                        @Html.TextBoxFor(m => m.Username, new { @class = "username", autofocus = "autofocus" })
                        @Html.ValidationMessageFor(m => m.Username)
                    </div>
                }
                else
                {
                    <div class="inputs">
                        @Html.LabelFor(m => m.Email, new { @class = "label" }, ":")
                        @Html.TextBoxFor(m => m.Email, new { @class = "email", autofocus = "autofocus" })
                        @Html.ValidationMessageFor(m => m.Email)
                    </div>
                }
                <div class="inputs">
                    @Html.LabelFor(m => m.Password, new { }, ":")
                    @Html.PasswordFor(m => m.Password, new { @class = "password" })
                    @Html.ValidationMessageFor(m => m.Password)
                </div>
                <div class="inputs reversed">
                    @Html.CheckBoxFor(m => m.RememberMe)
                    @Html.LabelFor(m => m.RememberMe)
                    <span class="forgot-password">
                        @Html.RouteLink(T("Account.Login.ForgotPassword").Text, "PasswordRecovery")
                    </span>
                </div>
                @if (Model.DisplayCaptcha)
                {
                    <div class="captcha-box">
                        @Html.Raw(Html.GenerateCaptcha())
                    </div>
                }
            </div>
                <div class="size-color">
                    <p class="wrap-by">
                        <input class="by" type="submit" value="@T("Account.Login.LoginButton")">
                    </p>
                </div>

            }
        </div>
    </div>
    <div class="external-authentication">
        @Html.Action("ExternalMethods", "ExternalAuthentication")
    </div>
    @Html.Action("TopicBlock", "Topic", new { systemName = "LoginRegistrationInfo" })
</div>


